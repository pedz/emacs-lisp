<title>Using Semantic for Intellisense</title>

<!--#include file="pagestart.php"-->

<table width=100% class=BAR>
<tr><td><h2><font color=black>Intellisense</font></h2></td>
<td><font color=black>"Using Semantic for Intellisense"</font></td></tr>
</table>

<p>
Intellisense is a term coined for (I think) Microsoft Visual Studio.
It represents a set of behaviors that aids a developer write code by
providing reminders of what possible classes and variables are
available.  Another way to describe this is simply "Smart Completion".
</p>

<p>
It is possible for Smart Completion to be provided via the tools made
available in Semantic.
</p>

<table width=100% class=BAR><tr><td>
<h3>What is Intellisense?   <font size=-1>(For Emacs Lisp programmers)</font></h3>
</td></tr></table>

<p>In emacs-lisp-mode, if you press M-TAB, the window may split and show
you completions.  In addition, it even knows if you are completing a
function or a variable, and adjusts the list accordingly.  This is
pretty close to what intellisense is, though the task is much more
difficult in C++.

<p>For C++, if you typed in
<pre>
q = foo.a
</pre>
<p>the intellisense feature would realize that the "a" symbol must be
a field or method of "foo", so first it looks up what "foo" is to
determine the data type.  It also knows that the result is assigned
into "q", so it also looks up q's datatype.  Lastly, it finds all
fields/methods of the variable "foo" that start with a, and
is/returns the datatype of q.

<p>That is (presumably) the "intelli-" part.

<p>While that would be really handy to have bound to M-TAB, the
association users from other environments make is that it shows these
features in popup interactive window, much like one of Emacs' tool
tips.

<p>The features of this window are that regular typing goes into the
editor, and up/down keys modify the highlighting of a selected
completion in the tooltip window.

<p>A feature of the completion is that the tooltip window would just
appear out of nowhere without you asking for it, presumably because
the editor thinks you're stuck.  It's not my term, but perhaps this is
the "-sense" part where the editor thinks it knows you are stuck.
</p>
<table width=100% class=BAR><tr><td>
<h3>Basic Setup</h3>
</td></tr></table>

<p>Here is the quick-and-dirty setup for <a href="semantic.shtml">Semantic</a>.
</p>

<b>Semantic Version 1.4x</b><br>
<pre>
   (setq semantic-load-turn-useful-things-on t)
   (require 'semantic-load)
</pre>

<b>Cedet Version 1.0 beta1 and later</b><br>
<pre>
   (setq semantic-load-turn-useful-things-on t)
   ;; Replace the path below with the install location.
   (load-file "~/cedet-VERSION/common/cedet.el")
</pre>

<p>These two lines set up two important aspects of smart completion.

<ol>
<li> semanticdb is enabled.  This allows symbol lookup between files.
<li> summary mode enabled.  This shows prototypes in the mode line.
</ol>

<p>Summary mode (or eldoc) is a good solution for Functional
languages, and local definitions.  Not always for a complete
structured or object oriented program.

<p>To be more complete, you need to specify a project directory for
semanticdb.

<pre>
   (setq semanticdb-project-roots
         (list "/path/to/project/one"
               "/path/to/project/two"))
</pre>

<p>This tells semanticdb which databases to references when looking up
symbols from a given file.  Only the root of a given project need be
specified.  
<a href="ede.shtml">EDE</a> will set these up for you automatically.

<p>The next step is to force Emacs to parse all your files into
databases.  Unfortunately, this is currently best done by just
visiting all the files you care about, and letting semantic parse
them.  Once you have visited all such files, execute:

<pre>
    M-x semanticdb-save-all-db
</pre>

<p>which will write out the databases for use in future sessions.
The database will be saved when you exit too, but I like saving my DB
occasionally so information isn't lost in a crash or other problem.

<table width=100% class=BAR><tr><td>
<h3>In version 2.0 beta2 or later</h3>
</td></tr></table>

<table align=right>
<td>
<a href=inlinecompletion.png>
<center>
<img src=inlinecompletion.png alt=call-tree.jpg width=100 height=100>
</a>
<br>
<font size=-2>
Smart Completion
</font>
</center>
</td>
</table>

<p>In Semantic 2.0 starting with beta2, there are two new ways for
smart completion to be accessed.  Please read the Info manual on
these topics.
</p>

<pre>
   M-x semantic-complete-analyze-inline
</pre>

This is a new command that does inline completion (underlining the
target symbol) and allows TAB to be used for completion purposes.
It uses the semantic analyzer to provide the list of completions.
</p>

<pre>
   M-x semantic-idle-completions-mode
</pre>

This is a minor mode which  starts
<tt>semantic-complete-analyze-inline</tt>
during idle time.  This has the additional effect of showing a list
of completions in a tooltip if you leave Emacs alone for too long.
</p>

<p>In addition to these two methods, the mechanism from Semantic 1.4x
still work, and have been enhanced.  You will need to follow the
directions form version 1.4x in setting up the database for semantic
2.0 as well.
</p>

<br clear="both">
<table width=100% class=BAR><tr><td>
<h3>In Version 1.4x</h3>
</td></tr></table>

<p>In Semantic 1.4 there were a limited number of ways to access the
smart completion system.  One interesting way was through the
<a href="speedbar.shtml">Speedbar</a> gui.
</p>

<pre>
   M-x semantic-speedbar-analysis
</pre>

<p>which will now be able to analyze the cursor location, and provide
intelligent references.  Sometimes you need to press <tt>g</tt> to
force an update.

<p>If speedbar is not your thing and you want more manual access to
  smart completion, add these lines to your .emacs file:

<pre>
  (require 'semantic-ia)
</pre>

The commands available (for binding to a key) are:

<ul>
<li>semantic-ia-complete-symbol
<li>semantic-ia-complete-symbol-menu
<li>semantic-ia-complete-tip
</ul>


<table width=100% class=BAR><tr><td>
<h2>Semantic Analyzer FAQ</h2>
</td></tr></table>

Quastions are for C/C++:

<pre>
Q) When I type the name of a struct or class and press "." nothing
   happens:

A1) Nothing is supposed to happen when you press ".".  you need to
    explicitly use the command `semantic-analyze-possible-completions'
   or (better) `semantic-ia-complete-symbol'.

A2) The context analyzer has a bug that requires at least on symbol
   character to appear after the "." and before the end of the
   function context.  It could be a part of the symbol completing, or
   just some other command on another line.

A3) In your favorite language, rebind "." to a new command that both
   inserts the ".", and starts your favorite intelligent completion
   mechanism.

Q) I've typed in a new function, and the analyzer does nothing or
   throws an error.

A) The new code must be parsed by Semantic at least once to identify
   that you are in a function.  You can force this to occur using
   the command "M-x bovinate RET".

   All syntax surrounding the types you are attempting to complete in
   must also be syntactically correct.

Q) How does semantic choose the available completions?

A) It first attempts to determine the type for the local context as
   an assignment, argument to a function, or other.

   Second, it parses the current reference, such as "c->f".

   It determines the type of "c", and collects a list of available
   members.  It then filters all those members starting with "f" in
   this case, and filters again to only those members of the desired
   datatype.

</pre>

<!--#include file="footer.fsf.shtml"-->
